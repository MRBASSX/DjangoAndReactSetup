
1. pip install Django-Verify-Email

2. In your settings.py :

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.environ.get('EMAIL_ID') 
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_PW')

DEFAULT_FROM_EMAIL = 'noreply<no_reply@domain.com>'


3. Add "verify_email" to your INSTALLED_APPS setting like this:

    INSTALLED_APPS = [
        ...
        "verify_email.apps.VerifyEmailConfig",
    ]


4. Include the "verify_email" URLconf in your project urls.py like this:


urlpatterns = [
	...
	path('verification/', include('verify_email.urls')),	

]


5. python manage.py migrate

For sending email from a signup form, in your views.py import:


from verify_email.email_handler import send_verification_email

Now in the function where you are validating the form:
def register_user(request):
    ...
    
    if form.is_valid():

        inactive_user = send_verification_email(request, form)
        inactive_user.cleaned_data['email']

        # Output: test-user123@gmail.com

inactive_user = ''

def send_welcome_email(request):
        subject = 'Welcome To My Site'
        massage = 'Thank you for creating an account!'
        from_mail = 'admin@Mysite.com'
        global inactive_user
        recepient_list = [inactive_user]
        send_mail(subject,massage,from_mail,recepient_list)
        return redirect("home")

class CustomRegisterView(FormView):
     def form_valid(self, form):
        # user = form.save()  # Automatically Save Registering User
        global inactive_user
        inactive_user = send_verification_email(self.request, form) 
        form.cleaned_data['email']
        if inactive_user is not None:
            login(self.request, inactive_user)  # Automatically log us in
        return super(CustomRegisterView, self).form_valid(form)